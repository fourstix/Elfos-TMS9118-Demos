; -------------------------------------------------------------------
;                      collision
;
; Demo of sprite collision detection, as a projectile hits 
; a target the target changes color.  Press input to exit.
;
; Program for a TMS9X18 Color Video Card driver and Elf/OS
;
; This program uses the TMS9118 graphics mode 2 for sprite display
; -------------------------------------------------------------------
; *** Based on software written by Glenn Jolly
; *** Original author copyright notice:
; Copyright (C) 2021 by Glenn Jolly
; -------------------------------------------------------------------
; *** Based on software written by Michael H Riley
; *** Original author copyright notice:
; -------------------------------------------------------------------
; *** This software is copyright 2004 by Michael H Riley          ***
; *** You have permission to use, modify, copy, and distribute    ***
; *** this software so long as this copyright notice is retained. ***
; *** This software may not be used in commercial applications    ***
; *** without express written permission from the author.         ***
; -------------------------------------------------------------------

#include    include/bios.inc
#include    include/kernel.inc
#include    include/ops.inc
#include    include/vdp.inc

            ; declare external procedures in vdp_video library
            extrn  checkVideo
            extrn  beginG2Mode
            extrn  setBackground
            extrn  sendColors
            extrn  sendNames
            extrn  setSpritePattern
            extrn  setSpriteData
            extrn  readStatus
            extrn  endG2Mode

; Executable program header generated by linker

          org     2000h
collision:    br      main
                                                    
            ; Build information                          
              db      8+80h              ; month
              db      31                 ; day
              dw      2022               ; year
              dw      2                  ; build
                          
              db      'Copyright 2022 by Gaston Williams',0
                          
main:       call checkVideo   ; verify vdp driver is loaded in memory
            lbdf no_driver
            
            ; init sprite position data
            load  rf, SPRITE_ATTR
            load  rd, START_SPRITE_DATA
            load  rc, END_SPRITE_ATTR-SPRITE_ATTR
            call  f_memcpy        ; rd <- rf (rc bytes)

            call beginG2Mode        
            ldi  COLOR_GRAY        
            call setBackground    ; just single background color              
            call sendNames

            call setSpritePattern      
            dw SPRITE_PAT                 ; sprite pattern data
            dw END_SPRITE_PAT-SPRITE_PAT  ; sprite pattern size

            call setSpriteData                    ; position and colors
            dw SPRITE_ATTR                        ; sprite attribute date
            dw END_SPRITE_DATA-START_SPRITE_DATA  ; sprite attribute size

; -----------------------------------------------------------
;                   Command loop
; -----------------------------------------------------------
            mov  rc, 0        ; init frame counter
            req               ; make sure q is off initially
            
SET_POSITION_PTR:
            mov  rb, PROJECTILE_SPRITE_XPOS

NEXT_FRAME: call readStatus   ; READ VDP status, D holds status byte
            plo  r7           ; save status byte for frame test
            ani  020h         ; test for collision flag
            bz   CHK_FRAME    
            seq               ; set Q if a collision occurred
CHK_FRAME:  glo  r7           ; get status byte to test for frame 
            shl               ; check msb to see if painting finished
            bnf  NEXT_FRAME   ; wait for screen to be painted            
                       
            lbq  COLLIDED     ; test Q to see if collision occurred during frame
            
            ; reset color of target
            mov  ra, SPRITE_POS0+3
            ldi  COLOR_DARK_RED
            str  ra            ; set color
            req
            lbr  DONE_COLLISION
            
            ; change color of target to black at collision
COLLIDED:   mov  ra, SPRITE_POS0+3
            ldi  COLOR_BLACK
            str  ra            ; set color                        
            
DONE_COLLISION: ; user input for exit            
            b4  QUIT             ; wait for input to exit             
            
MOVE_SPRITES:
            ; update X pos of projectile
            mov  ra, SPRITE_POS1+1
            ldn  rb
            lbz  SET_POSITION_PTR
            str  ra
            inc  rb

UPDATE_POS: call setSpriteData
            dw   SPRITE_POS0                        ; sprite attribute data
            dw   END_SPRITE_DATA-START_SPRITE_DATA  ;sprite attribute size
            inc  rc
            req                   ; clear collision flag after move
            lbr  NEXT_FRAME

QUIT:       ldi  V_VDP_RESET      ; Set D to reset vdp (turn interrupt off)
            call endG2Mode        ; set group back to default
            req                   ; turn Q off
            rtn                   ; return to Elf/OS
                
no_driver:  call O_INMSG          ; show error message
            db 'TMS9X18 Video driver is not loaded.',10,13,0
            rtn                   ; return to ELf/OS

SPRITE_PAT:
            ; 16x16 target
            db  007h, 01Fh, 03Fh, 07Fh, 07Fh, 0FFh, 0FFh, 0FFh
            db  0FFh, 0FFh, 0FFh, 07Fh, 07Fh, 03Fh, 01Fh, 007h
            db  0E0h, 0F8h, 0FCh, 0FEh, 0FEh, 0FFh, 0FFh, 0FFh
            db  0FFh, 0FFh, 0FFh, 0FEh, 0FEh, 0FCh, 0F8h, 0E0h

            ; 16x16 projectile
            db  000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h
            db  001h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
            db  000h, 000h, 000h, 000h, 000h, 000h, 000h, 080h
            db  080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
END_SPRITE_PAT:

; Note: backup copy not really used in this version except at initialization
; Since each 16x16 sprite takes up 4 8x8 'slots' they are numbered 0&4
SPRITE_ATTR:
            ;   [Y,   X, Id#, Color]
             db  88, 120, 0,  COLOR_DARK_RED  ; target
             db  88,  57, 4,  COLOR_DARK_RED  ; projectile
             db  0D0h              ; Sprite processing terminator
END_SPRITE_ATTR:

; dynamic position will be updated in this memory block
START_SPRITE_DATA:
;                Y    X
SPRITE_POS0: db  88, 120, 0,  COLOR_DARK_RED  ; target
SPRITE_POS1: db  88,  57, 4,  COLOR_DARK_RED  ; projectile
TERMINATOR:  db  0D0h
END_SPRITE_DATA:


PROJECTILE_SPRITE_XPOS:
            db    57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
            db    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,
            db    89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
            db   105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
            db   121, 122, 123, 124, 125, 126, 127, 127, 127, 0,   0

        end collision
