; -------------------------------------------------------------------
;                      fivesprites_noq
;
; Demo of a moving 5th sprite, as it passes line of 4 sprites it
; blanks out, and the fourth sprite changes color. These changes are
; made based on the status byte's 5th sprite flag. Press input to exit.
;
; Program for a TMS9X18 Color Video Card driver and Elf/OS
;
; This program uses the TMS9118 graphics mode 2 for sprite display
; -------------------------------------------------------------------
; *** Based on software written by Glenn Jolly
; *** Original author copyright notice:
; Copyright (C) 2021 by Glenn Jolly
; -------------------------------------------------------------------
; *** Based on software written by Michael H Riley
; *** Original author copyright notice:
; -------------------------------------------------------------------
; *** This software is copyright 2004 by Michael H Riley          ***
; *** You have permission to use, modify, copy, and distribute    ***
; *** this software so long as this copyright notice is retained. ***
; *** This software may not be used in commercial applications    ***
; *** without express written permission from the author.         ***
; -------------------------------------------------------------------

#include    include/bios.inc
#include    include/kernel.inc
#include    include/ops.inc
#include    include/vdp.inc

            ; declare external procedures in vdp_video library
            extrn  checkVideo
            extrn  beginG2Mode
            extrn  setBackground
            extrn  sendColors
            extrn  sendNames
            extrn  setSpritePattern
            extrn  setSpriteData
            extrn  readStatus
            extrn  endG2Mode

            ; Executable program header generated by linker


          org     2000h
fivesprites_noq:  br      main
                                                  
                  ; Build information                          
                  db      11+80h             ; month
                  db      30                 ; day
                  dw      2022               ; year
                  dw      3                  ; build
                        
                  db      'Copyright 2022 by Gaston Williams',0              

main:         ; init sprite position data
              mov  rf, SPRITE_ATTR
              mov  rd, START_SPRITE_DATA
              mov  rc, END_SPRITE_ATTR-SPRITE_ATTR
              call f_memcpy       ; rd <- rf (rc bytes)

              ldi  V_VDP_CLEAR    ; clear vdp memory
              call beginG2Mode

              ldi  COLOR_GRAY     ; gray field
              call setBackground
              call sendNames

              call setSpritePattern      
              dw SPRITE_PAT                 ; sprite pattern data
              dw END_SPRITE_PAT-SPRITE_PAT  ; sprite pattern size

            
              call setSpriteData                    ; position and colors
              dw SPRITE_ATTR                        ; sprite attribute date
              dw END_SPRITE_DATA-START_SPRITE_DATA  ; sprite attribute size



; -----------------------------------------------------------
;                   Command loop
; -----------------------------------------------------------
              mov  rc, 0         ; init frame counter
       
SET_POSITION_PTR:
              mov  rb, FIFTH_SPRITE_YPOS

NEXT_FRAME:   ldi  0            ; clear accumulated status 
              plo  r7           ; save for frame updates

CHK_FRAME:   call readStatus    ; read VDP status, D holds status byte
              str  r2            ; put status byte in X
              glo  r7            ; get accumulated status
              or                 ; accumulate bits that turn true during painting
              plo  r7            ; save for next check
              
              shl               ; check msb to see if painting finished
              bnf  CHK_FRAME    ; wait for screen to be painted            
              
              
              glo  r7            ; get status byte and test 
              ani  040h          ; mask out everything but fifth sprite bit
              lbnz FLAG5         ; test to see if fifth sprite occurred
            
              ; reset color of 4th ball back to white
              mov  ra, SPRITE_POS3+3
              ldi  COLOR_WHITE   ; white
              str  ra            ; set color
              lbr  DONE_5FLAG
            
              ; change color of 4th ball when 5 sprite flag set
FLAG5:        mov  ra, SPRITE_POS3+3
              ldi  COLOR_MAGENTA ; magenta
              str  ra            ; set color

DONE_5FLAG:   ; user input for exit
              b4  QUIT          ; exit if input typed

              ; redraw but skip every other move - effective 30Hz display
              ; must redraw else successive inp/waits will hang
              glo  rc
              ani  1
              lbz  UPDATE_POS

MOVE_SPRITES:
              ; update Y pos of fifth sprite
              mov  ra, SPRITE_POS4
              ldn  rb
              lbz  SET_POSITION_PTR
              str  ra
              inc  rb

UPDATE_POS:   call setSpriteData
              dw   SPRITE_POS0                        ; sprite attribute data
              dw   END_SPRITE_DATA-START_SPRITE_DATA  ; sprite attribute size
              inc  rc
              lbr  NEXT_FRAME

QUIT:         ldi  V_VDP_CLEAR      ; reset video to turn off vdp interrupt
              call endG2Mode        ; set group back to default
              rtn                   ; return to Elf/OS
                                       
            
no_driver:    call O_INMSG          ; show error message
              db 'TMS9X18 Video driver is not loaded.',10,13,0
              rtn                   ; return to Elf/OS

SPRITE_PAT:
              ; 16x16 ball 1
              db  007h,01Fh,03Fh,07Fh,07Fh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,07Fh,07Fh,03Fh,01Fh,007h
              db  0E0h,0F8h,0FCh,0FEh,0FEh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,0FEh,0FEh,0FCh,0F8h,0E0h

              ; 16x16 ball 2
              db  007h,01Fh,03Fh,07Fh,07Fh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,07Fh,07Fh,03Fh,01Fh,007h
              db  0E0h,0F8h,0FCh,0FEh,0FEh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,0FEh,0FEh,0FCh,0F8h,0E0h

              ; 16x16 ball 3
              db  007h,01Fh,03Fh,07Fh,07Fh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,07Fh,07Fh,03Fh,01Fh,007h
              db  0E0h,0F8h,0FCh,0FEh,0FEh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,0FEh,0FEh,0FCh,0F8h,0E0h

              ; 16x16 ball 4
              db  007h,01Fh,03Fh,07Fh,07Fh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,07Fh,07Fh,03Fh,01Fh,007h
              db  0E0h,0F8h,0FCh,0FEh,0FEh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,0FEh,0FEh,0FCh,0F8h,0E0h

              ; 16x16 ball 5
              db  007h,01Fh,03Fh,07Fh,07Fh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,07Fh,07Fh,03Fh,01Fh,007h
              db  0E0h,0F8h,0FCh,0FEh,0FEh,0FFh,0FFh,0FFh
              db  0FFh,0FFh,0FFh,0FEh,0FEh,0FCh,0F8h,0E0h
END_SPRITE_PAT:

; Note: backup copy not really used in this version except at initialization
; Since each 16x16 sprite takes up 4 8x8 'slots' they are numbered 0,4,8,12,16
SPRITE_ATTR:
              ;   [Y,   X, Id#, Color]
              db  88,  80, 0,  COLOR_RED    ; red ball1
              db  88, 100, 4,  COLOR_GREEN  ; green ball2
              db  88, 120, 8,  COLOR_BLUE   ; blue ball3
              db  88, 140, 12, COLOR_WHITE  ; white ball4
              db  56, 160, 16, COLOR_CYAN   ; cyan ball5
              db  0D0h              ; Sprite processing terminator
END_SPRITE_ATTR:

; dynamic position will be updated in this memory block
START_SPRITE_DATA:
;                Y    X
SPRITE_POS0:  db  88,  80, 0,  COLOR_RED    ; red ball1
SPRITE_POS1:  db  88, 100, 4,  COLOR_GREEN  ; green ball2
SPRITE_POS2:  db  88, 120, 8,  COLOR_BLUE   ; blue ball3
SPRITE_POS3:  db  88, 140, 12, COLOR_WHITE  ; white ball4
SPRITE_POS4:  db  56, 160, 16, COLOR_CYAN   ; cyan ball5
TERMINATOR:   db  0D0h
END_SPRITE_DATA:

FIFTH_SPRITE_YPOS:
              db    57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
              db    73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,
              db    89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
              db   105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
              db   120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105,
              db   104, 103, 102, 101, 100,  99,  98,  97,  96,  95,  94,  93,  92,  91,  90,  89,
              db    88,  87,  86,  85,  84,  83,  82,  81,  80,  79,  78,  77,  76,  75,  74,  73,
              db    72,  71,  70,  69,  68,  67,  66,  65,  64,  63,  62,  61,  60,  59,  58,  57,
              db     0,   0
          
        end fivesprites_noq
